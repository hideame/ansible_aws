- name: WP-CLIコマンドのダウンロード
  get_url:
    url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    dest: /usr/local/bin/wp
    owner: apache
    group: apache
    mode: 0755

- name: WordPressがダウンロード済みなら実施しない
  stat:
    path: "{{ wp_path }}"
  register: wordpress

- name: WordPressのダウンロード
  shell: /usr/local/bin/wp core download --locale=ja --path="{{ wp_path }}"
  when: not wordpress.stat.exists

- name: WordPressの所有者をapacheに変更
  file:
    path: "{{ wp_path }}"
    owner: apache
    group: apache
    state: directory
    recurse: yes

- name: /usr/share/httpd/.ansibleディレクトリ作成
  file:
    path: /usr/share/httpd/.ansible
    mode: 0755
    state: directory

- name: /usr/share/httpd/.ansible/tmpディレクトリ作成
  file:
    path: /usr/share/httpd/.ansible/tmp
    owner: apache
    group: apache
    mode: 0700
    state: directory

- name: configファイル設定済みなら実施しない
  stat:
    path: "{{ wp_path }}/wp-config.php"
  register: wpconfig

- name: configファイル設定(DB設定情報)
  become_user: apache
  shell: /usr/local/bin/wp core config --dbhost=localhost --dbname="{{ db_name }}" --dbuser="{{ db_user }}" --dbpass="{{ db_pass }}" --path="{{ wp_path }}"
  when: not wpconfig.stat.exists

- name: WordPressのインストール
  become_user: apache
  shell: /usr/local/bin/wp core install --url=http://"{{ hostname }}"/ --title="{{ title }}" --admin_user="{{ wp_user }}" --admin_password="{{ wp_pass }}" --admin_email="{{ email }}" --path="{{ wp_path }}"
  when: not wpconfig.stat.exists

- name: DocumentRoo等の変更
  replace:
    dest: /etc/httpd/conf/httpd.conf
    regexp:  /var/www/html
    replace: "{{ wp_path }}"

- name: httpdサービスの再起動
  service:
    name: httpd
    state: restarted

- name: wp-config.phpが変更済みかを確認
  shell: grep "^define( 'DB_HOST', 'localhost' );" "{{ wp_path }}/wp-config.php"
  register: wpconfig_check
  failed_when: wpconfig_check.rc not in [0, 1]
  changed_when: false                              # 変更していないので、changedにならないように制御

- name: wp-config.phpの変更(localhostから実際のIPアドレスに)
  lineinfile:
    dest: "{{ wp_path }}/wp-config.php"
    regexp: "^define\\( 'DB_HOST', 'localhost' \\);"
    line: "define( 'DB_HOST', '{{ hostname }}' );"
    backrefs: yes                             # マッチしなかった場合もEOFに追記しない
  when: wpconfig_check.rc == 0

- name: 実際のIPアドレスへのアクセスを許可
  shell: mysql -uroot -p"{{ db_rootpass }}" -e"grant all privileges on {{ db_name }}.* to {{ db_user }}@{{ hostname }} with grant option;"
  when: wpconfig_check.rc == 0

- name: 設定を反映
  shell: mysql -uroot -p"{{ db_rootpass }}" -e'flush privileges;'
  when: wpconfig_check.rc == 0

# - name: テーマがインストール済みなら実施しない(habakiri)
#   stat:
#     path: "{{ wp_path }}/wp-content/themes/habakiri"
#   register: habakiri

# - name: テーマのインストール(habakiri)
#   become_user: apache
#   shell: /usr/local/bin/wp theme install habakiri --path="{{ wp_path }}"
#   when: not habakiri.stat.exists

- name: 親テーマのダウンロード(cocoon)
  get_url:
    url: https://wp-cocoon.com/download/791/
    dest: /tmp/cocoon-master-2.1.3.6.zip

- name: 親テーマが展開済みなら実施しない(cocoon)
  stat:
    path: "{{ wp_path }}/wp-content/themes/cocoon-master"
  register: cocoon

- name: 親テーマの展開(cocoon)
  unarchive:
    src: /tmp/cocoon-master-2.1.3.6.zip
    dest: "{{ wp_path }}/wp-content/themes/"
    remote_src: yes                           # リモートにダウンロードデータがある場合はyes
  when: not cocoon.stat.exists

- name: 子テーマのダウンロード(cocoon-child)
  get_url:
    url: https://wp-cocoon.com/download/726/
    dest: /tmp/cocoon-child-master-1.1.1.zip

- name: 子テーマが展開済みなら実施しない(cocoon-child)
  stat:
    path: "{{ wp_path }}/wp-content/themes/cocoon-child-master"
  register: cocoonChild

- name: 子テーマの展開(cocoon-child)
  unarchive:
    src: /tmp/cocoon-child-master-1.1.1.zip
    dest: "{{wp_path}}/wp-content/themes/"
    remote_src: yes                           # リモートにダウンロードデータがある場合はyes
  when: not cocoonChild.stat.exists

- name: テーマ配下の所有権をapacheに変更
  file:
    path: "{{ wp_path }}/wp-content/themes"
    owner: apache
    group: apache
    state: directory
    recurse: yes

- name: テーマの有効化(cocoon-child)
  become_user: apache
  shell: /usr/local/bin/wp theme activate cocoon-child-master --path="{{ wp_path }}"
  when: not cocoonChild.stat.exists

- name: プラグインのインストール
  become_user: apache
  shell: /usr/local/bin/wp plugin install "{{ item }}" --path="{{ wp_path }}" --activate
  with_items:
    - backwpup                          # WordPressのファイルとデータベースのバックアップを取得
    - broken-link-checker               # リンク切れを自動でチェック
    - contact-form-7                    # お問い合わせフォームプラグイン(メール機能は下記Gmail SMTPで実装
    - flickr-pick-a-picture             # 著作権リンク付きの写真を挿入
    - gmail-smtp                        # GmailのSMTPサーバー経由でメールを送信
    - google-sitemap-generator          # サイトマップをGoogleに送信してインデックスへの登録漏れを防ぐ
    - ml-slider                         # スライドショーを生成
    - pixabay-images                    # パブリックドメイン(知的財産権のない)画像を簡単に挿入
    - polylang                          # WordPress に多言語機能を追加
    - siteorigin-panels                 # 固定ページにもサイドバーウィジェットを作成
    - syntaxhighlighter                 # ソースコードを綺麗に表示
    - wordpress-importer                # WordPressエクスポートファイルからインポートするツール
    - wp-multibyte-patch                # 日本語版WordPressのマルチバイト文字の取り扱いに関する不具合の修正
    # - siteguard                         # セキュリティ対策
